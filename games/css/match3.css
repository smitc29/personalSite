body
{
   font-family: 'Noto Sans', sans-serif; 
}

h3
{
    margin: 30px auto;
    text-align: center;
    animation-name: Dropdown;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.41s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
}

button
{
    /* Buttons to reset board, toggle autoplay */
    position: relative;
    bottom: -10%;
    border-radius: 5px;
    padding: 5px;
    margin-bottom: 15px;
    opacity: 1.0;
    filter: opacity(0%);
    
    /* Border properties only appear if button can be used for super move */
    border-width: 1px;
    border-color: black;
    
    animation-name: Dropdown;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.61s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    
    
}

.Auto
{
    /* Button has been toggled to trigger autoplay */
    filter: invert(100%);
}

#playspace
{
    margin: 0 auto;
    position: absolute;
    width: 100vw;
    max-width: 500px;
    height: 100vw;
    max-height: 500px;
    top: 10%;
    left: 50%;
    transform: translateX(-50%);
	display: inline-block;
    list-style-type: none;
    text-align: center;
}

#Board
{
    border-style: solid;
    border-color:darkgrey;
    border-width: 3px;
    border-radius: 5px;
    
    overflow: hidden; 
    padding: 0px;
    
    
    margin: 0 auto;
    background-color: none;/* lightgray */
    position: relative;
    width: 100vw;
    max-width: 500px;
    height: 100vw;
    max-height: 500px;
    top: 0;
    left: -4px;
	display: inline-block;
    list-style-type: none;
    text-align: center;
}

#Board.Freeze
{
    background-color: azure;
    border-color: cornflowerblue;
}

.Square
{
    /* Div used to store checkers or unoccupied spaces */
    width: 9.5%;
    height: 9.5%;
    position:absolute;
    top: 0;
    left: 0;
    margin-top: 0.75%;
    margin-left: 0.75%;
    transform: scale(0);
    border-radius: 3px;
    z-index: 3;
    
    border-style: solid;
    border-color: darkgrey;
    border-width: 3px;
    border-radius: 5px;
    
    background-color:floralwhite;
    background-size: cover;
    background-repeat: no-repeat;
    
    animation-name: Expander;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.21s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
}

.noplay
{
    /* Used purely for aesthetics */
    background-color: #bf4141;
}

/* Give each color panel a unique background for display */
.Red
{   
    background-image:url(../img/MatchRed.png);
}

.Blue
{
    background-image:url(../img/MatchBlue.png);
}

.Yellow
{   
    background-image:url(../img/MatchYellow.png);
}

.Green
{
    background-image:url(../img/MatchGreen.png);
}

.Purple
{   
    background-image:url(../img/MatchPurple.png);
}

.Orange
{
    background-image:url(../img/MatchOrange.png);
}

/* Whichever tile is currently selected will display this behavior */
.Selected
{
    background-color: #c4f7ff;
    border-color: #707070;
    
    animation-name: BlueSelect;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 3s;
    animation-timing-function: ease-in-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

.BlackPiece.King
{
    /* Used to denote a black king is on this square */
    background-image:url(../img/KingBlack.png);
}

.play
{
    /* This class appears when a player makes a move. It exists solely for aesthetic reasons, and is not critical to how the game functions */
    animation-name: Grow;
    animation-direction: normal;
    animation-duration: 0.45s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: 1;
}

.Choice
{
    background-color: lightblue;
    z-index: 4;
    
    animation-name: BlueSelect;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 3s;
    animation-timing-function: ease-in-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;

}

.Selected:nth-child(n)
{
    background-color: lightsteelblue;
}

#Counter, #AutoplayMode
{
    /* Unseen value used to track current turn/player */
    position: absolute;
    z-index: -3;
    opacity: 0;
    display: none;
}

.RightShift
{
    animation: RightShift;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.2s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

.LeftShift
{
    animation: LeftShift;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.2s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

.UpShift
{
    animation: UpShift;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.2s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

.DownShift
{
    animation: DownShift;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.2s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

.LongDrop
{
    animation: LongDrop;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.2s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

.VanishCombo
{
    animation: VanishCombo;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 0.1s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
}

#WipeBoard
{
    background-color: black;
    z-index: 99;
    position: absolute;
    left: -1%;
    top: 0%;
    width: 102%;
    height: 102%;
    
    animation: FadeOut;
    animation-direction: normal;
    animation-fill-mode: forwards;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    animation-delay: 0s;
    animation-iteration-count: infinite;
    opacity: 1;
}

-webkit-@keyframes Expander {
    0% {transform:translate(-50%, -50%) scale(0);}
    100% {transform:translate(0%, 0%) scale(1, 1);}
}

@keyframes Expander {
    0% {transform:translate(-50%, -50%) scale(0);}
    100% {transform:translate(0%, 0%) scale(1, 1);}
}

-webkit-@keyframes Dropdown {
    0% {transform:translateY(-400%); filter: opacity(0%);}
    100% {transform:translateY(0%); filter: opacity(100%);}
}

@keyframes Dropdown {
    0% {transform:translateY(-400%); filter: opacity(0%);}
    100% {transform:translateY(0%); filter: opacity(100%);}
}

-webkit-@keyframes BlueSelect {
    0% {transform: rotate(0deg); background-color: powderblue; border-radius: 0;}
    50% {transform: rotate(0deg); background-color: skyblue; border-radius: 25%;}
    100% {transform: rotate(0deg); background-color: powderblue; border-radius: 0;}
}

@keyframes BlueSelect {
    0% {transform: rotate(0deg); background-color: powderblue; border-radius: 0;}
    50% {transform: rotate(0deg); background-color: skyblue; border-radius: 25%;}
    100% {transform: rotate(0deg); background-color: powderblue; border-radius: 0;}
}

-webkit-@keyframes Grow {
    0% {transform: scale(1);  background-size: 0%; background-position: center;}
    100% {transform: scale(1);  background-size: 100%%; background-position: center;}
}

@keyframes Grow {
    0% {transform: scale(1); background-size: 0%; background-position: center;}
    
    99% {background-size: 100%; background-position: center;}
    100% { transform: scale(1); background-size: 100%%; background-position: center;}
}

-webkit-@keyframes RightShift {
    0% {transform:translateX(-100%);}
    100% { transform: translateX(0%);}
}

@keyframes RightShift {
    0% {transform:translateX(-100%);}
    100% { transform: translateX(0%);}
}

-webkit-@keyframes LeftShift {
    0% {transform:translateX(100%);}
    100% { transform: translateX(0%);}
}

@keyframes LeftShift {
    0% {transform:translateX(100%);}
    100% { transform: translateX(0%);}
}

-webkit-@keyframes UpShift {
    0% {transform:translateY(100%);}
    100% { transform: translateY(0%);}
}

@keyframes UpShift {
    0% {transform:translateY(100%);}
    100% { transform: translateY(0%);}
}

-webkit-@keyframes DownShift {
    0% {transform:translateY(-100%);}
    100% { transform: translateY(0%);}
}

@keyframes DownShift {
    0% {transform:translateY(-100%);}
    100% { transform: translateY(0%);}
}

-webkit-@keyframes LongDrop {
    0% {transform:translateY(-1000%);}
    100% { transform: translateY(0%);}
}

@keyframes LongDrop {
    0% {transform:translateY(-1000%);}
    100% { transform: translateY(0%);}
}

-webkit-@keyframes VanishCombo {
    0% {transform:scale(100%); opacity: 1;}
    100% { transform: scale(150%); opacity: 0.01;}
}

@keyframes VanishCombo {
    0% {transform:scale(1,1); opacity: 1;}
    100% { transform: scale(1.5,1.5); opacity: 0.01;}
}

-webkit-@keyframes FadeOut {
    0% {opacity: 1;}
    100% { opacity: 0;}
}

@keyframes FadeOut {
    0% {opacity: 1;}
    100% { opacity: 0;}
}

@media (max-width: 600px) {
  /* CSS that should be displayed if width is equal to or less than 600px goes here */

    
}/* End of mobile/tablet platforms */
